import { supabase } from '../config/supabase';

export interface Coordinates {
  lat: number;
  lng: number;
}

export interface ClientWithCoordinates {
  id: string;
  code_union: string;
  nom_client: string;
  ville: string;
  code_postal: string;
  latitude: number | null;
  longitude: number | null;
}

/**
 * Service de g√©olocalisation utilisant Google Maps Geocoding API
 * avec stockage en base de donn√©es pour √©viter les appels r√©p√©t√©s
 */
export class GeocodingService {
  private static instance: GeocodingService;
  private geocoder: google.maps.Geocoder | null = null;

  private constructor() {
    // Initialiser le geocoder quand Google Maps est charg√©
    if (window.google?.maps) {
      this.geocoder = new google.maps.Geocoder();
    }
  }

  public static getInstance(): GeocodingService {
    if (!GeocodingService.instance) {
      GeocodingService.instance = new GeocodingService();
    }
    return GeocodingService.instance;
  }

  /**
   * Initialise le geocoder Google Maps
   */
  public initializeGeocoder(): void {
    if (window.google?.maps && !this.geocoder) {
      this.geocoder = new google.maps.Geocoder();
      console.log('‚úÖ Google Maps Geocoder initialis√©');
    }
  }

  /**
   * Obtient les coordonn√©es d'un client
   * 1. V√©rifie d'abord en base de donn√©es
   * 2. Si absent, g√©ocode avec Google Maps
   * 3. Sauvegarde en base pour les prochaines fois
   */
  public async getClientCoordinates(client: ClientWithCoordinates): Promise<Coordinates> {
    // 1. V√©rifier si les coordonn√©es existent d√©j√† en base
    if (client.latitude && client.longitude) {
      console.log(`üíæ Coordonn√©es trouv√©es en base pour ${client.nom_client}:`, {
        lat: client.latitude,
        lng: client.longitude
      });
      return { lat: client.latitude, lng: client.longitude };
    }

    // 2. G√©ocoder avec Google Maps
    console.log(`üîç G√©ocodage de ${client.nom_client} (${client.code_postal} ${client.ville})`);
    const coordinates = await this.geocodeWithGoogleMaps(client);

    // 3. Sauvegarder en base de donn√©es
    if (coordinates) {
      await this.saveCoordinatesToDatabase(client.id, coordinates);
      console.log(`üíæ Coordonn√©es sauvegard√©es pour ${client.nom_client}:`, coordinates);
    }

    return coordinates || { lat: 48.8566, lng: 2.3522 }; // Fallback Paris
  }

  /**
   * G√©ocode une adresse avec Google Maps
   */
  private async geocodeWithGoogleMaps(client: ClientWithCoordinates): Promise<Coordinates | null> {
    if (!this.geocoder) {
      console.error('‚ùå Google Maps Geocoder non initialis√©');
      return null;
    }

    return new Promise((resolve) => {
      const address = `${client.code_postal} ${client.ville}, France`;
      
      this.geocoder!.geocode(
        { address },
        (results, status) => {
          if (status === 'OK' && results?.[0]) {
            const location = results[0].geometry.location;
            const coordinates = {
              lat: location.lat(),
              lng: location.lng()
            };
            console.log(`‚úÖ G√©ocodage r√©ussi pour ${client.nom_client}:`, coordinates);
            resolve(coordinates);
          } else {
            console.warn(`‚ö†Ô∏è √âchec du g√©ocodage pour ${client.nom_client}:`, status);
            resolve(null);
          }
        }
      );
    });
  }

  /**
   * Sauvegarde les coordonn√©es en base de donn√©es
   */
  private async saveCoordinatesToDatabase(clientId: string, coordinates: Coordinates): Promise<void> {
    try {
      const { error } = await supabase
        .from('clients')
        .update({
          latitude: coordinates.lat,
          longitude: coordinates.lng
        })
        .eq('id', clientId);

      if (error) {
        console.error('‚ùå Erreur sauvegarde coordonn√©es:', error);
      } else {
        console.log(`üíæ Coordonn√©es sauvegard√©es pour client ${clientId}`);
      }
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde coordonn√©es:', error);
    }
  }

  /**
   * R√©cup√®re tous les clients avec leurs coordonn√©es
   */
  public async getAllClientsWithCoordinates(): Promise<ClientWithCoordinates[]> {
    try {
      const { data: clients, error } = await supabase
        .from('clients')
        .select('id, code_union, nom_client, ville, code_postal, latitude, longitude')
        .not('code_postal', 'is', null)
        .order('code_union');

      if (error) {
        console.error('‚ùå Erreur r√©cup√©ration clients:', error);
        return [];
      }

      console.log(`üìä ${clients?.length || 0} clients r√©cup√©r√©s de la base`);
      return clients || [];
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration clients:', error);
      return [];
    }
  }

  /**
   * Met √† jour les coordonn√©es de tous les clients manquants
   */
  public async updateAllMissingCoordinates(): Promise<void> {
    console.log('üöÄ Mise √† jour des coordonn√©es manquantes...');
    
    const clients = await this.getAllClientsWithCoordinates();
    const clientsWithoutCoordinates = clients.filter(client => !client.latitude || !client.longitude);
    
    console.log(`üìä ${clientsWithoutCoordinates.length} clients sans coordonn√©es √† g√©ocoder`);

    for (let i = 0; i < clientsWithoutCoordinates.length; i++) {
      const client = clientsWithoutCoordinates[i];
      console.log(`üìç G√©ocodage ${i + 1}/${clientsWithoutCoordinates.length}: ${client.nom_client}`);
      
      try {
        await this.getClientCoordinates(client);
        
        // D√©lai pour respecter les limites de l'API Google Maps
        if (i < clientsWithoutCoordinates.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 100)); // 100ms entre chaque requ√™te
        }
      } catch (error) {
        console.error(`‚ùå Erreur g√©ocodage ${client.nom_client}:`, error);
      }
    }

    console.log('‚úÖ Mise √† jour des coordonn√©es termin√©e');
  }

  /**
   * Force la mise √† jour des coordonn√©es d'un client sp√©cifique
   */
  public async updateClientCoordinates(clientId: string): Promise<void> {
    try {
      console.log(`üîÑ Mise √† jour forc√©e des coordonn√©es pour le client ${clientId}`);
      
      // R√©cup√©rer le client
      const { data: client, error } = await supabase
        .from('clients')
        .select('*')
        .eq('id', clientId)
        .single();

      if (error || !client) {
        console.error('‚ùå Client non trouv√©:', error);
        return;
      }

      // Forcer le g√©ocodage m√™me si des coordonn√©es existent d√©j√†
      const coordinates = await this.geocodeWithGoogleMaps(client);
      
      if (coordinates) {
        await this.saveCoordinatesToDatabase(clientId, coordinates);
        console.log(`‚úÖ Coordonn√©es mises √† jour pour ${client.nom_client}:`, coordinates);
      }
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour coordonn√©es client:', error);
    }
  }
}
