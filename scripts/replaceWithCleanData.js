const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

console.log('üßπ Remplacement des donn√©es par les donn√©es nettoy√©es...\n');

// Configuration Supabase
const SUPABASE_CONFIG = {
  url: 'https://ybzajzcwxcgoxtqsimol.supabase.co',
  anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InliemFqemN3eGNnb3h0cXNpbW9sIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjI4ODA4NywiZXhwIjoyMDcxODY0MDg3fQ.t6KhbnUmh5Ix3CWlYM5HxjR58GNxtug-h_GMzE9VIio',
};

// Headers pour les requ√™tes
const getHeaders = () => ({
  'apikey': SUPABASE_CONFIG.anonKey,
  'Authorization': `Bearer ${SUPABASE_CONFIG.anonKey}`,
  'Content-Type': 'application/json',
});

async function replaceWithCleanData() {
  try {
    console.log('üìä √âtape 1: Sauvegarde des donn√©es actuelles...');
    
    // Sauvegarder les donn√©es actuelles
    const backupResponse = await fetch(
      `${SUPABASE_CONFIG.url}/rest/v1/adherents?select=*`,
      {
        method: 'GET',
        headers: getHeaders()
      }
    );
    
    if (backupResponse.ok) {
      const currentData = await backupResponse.json();
      const backupFile = path.join(__dirname, '..', 'backups', `backup_before_cleanup_${new Date().toISOString().split('T')[0]}.json`);
      
      // Cr√©er le dossier backups s'il n'existe pas
      const backupDir = path.dirname(backupFile);
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      
      fs.writeFileSync(backupFile, JSON.stringify(currentData, null, 2));
      console.log(`‚úÖ Sauvegarde cr√©√©e: ${backupFile}`);
      console.log(`üìä ${currentData.length} enregistrements sauvegard√©s`);
    }
    
    console.log('\nüóëÔ∏è √âtape 2: Suppression des donn√©es actuelles...');
    
    // Supprimer toutes les donn√©es actuelles
    const deleteResponse = await fetch(
      `${SUPABASE_CONFIG.url}/rest/v1/adherents?select=*`,
      {
        method: 'DELETE',
        headers: getHeaders()
      }
    );
    
    if (deleteResponse.ok) {
      console.log('‚úÖ Donn√©es actuelles supprim√©es');
    } else {
      console.log('‚ö†Ô∏è Erreur lors de la suppression:', deleteResponse.status);
    }
    
    console.log('\nüìÅ √âtape 3: V√©rification du fichier nettoy√©...');
    
    // V√©rifier que le fichier existe
    const cleanDataPath = path.join(__dirname, '..', 'clean_data.json');
    if (!fs.existsSync(cleanDataPath)) {
      console.log('‚ùå Fichier clean_data.json non trouv√© !');
      console.log('üìù Veuillez placer votre fichier Excel nettoy√© dans le dossier racine et le renommer en clean_data.json');
      return;
    }
    
    const cleanData = JSON.parse(fs.readFileSync(cleanDataPath, 'utf8'));
    console.log(`‚úÖ Fichier nettoy√© trouv√©: ${cleanData.length} enregistrements`);
    
    console.log('\nüì§ √âtape 4: Import des donn√©es nettoy√©es...');
    
    // Importer par lots de 1000
    const batchSize = 1000;
    const totalBatches = Math.ceil(cleanData.length / batchSize);
    let importedCount = 0;
    
    for (let i = 0; i < totalBatches; i++) {
      const start = i * batchSize;
      const end = Math.min(start + batchSize, cleanData.length);
      const batch = cleanData.slice(start, end);
      
      const importResponse = await fetch(
        `${SUPABASE_CONFIG.url}/rest/v1/adherents`,
        {
          method: 'POST',
          headers: getHeaders(),
          body: JSON.stringify(batch)
        }
      );
      
      if (importResponse.ok) {
        importedCount += batch.length;
        console.log(`‚úÖ Lot ${i + 1}/${totalBatches}: ${batch.length} enregistrements import√©s (Total: ${importedCount})`);
      } else {
        console.log(`‚ùå Erreur lot ${i + 1}:`, importResponse.status, await importResponse.text());
      }
      
      // Pause entre les lots pour √©viter la surcharge
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('\n‚úÖ Import termin√© !');
    console.log(`üìä ${importedCount} enregistrements nettoy√©s import√©s`);
    
    // V√©rifier le r√©sultat
    console.log('\nüîç V√©rification finale...');
    const finalCountResponse = await fetch(
      `${SUPABASE_CONFIG.url}/rest/v1/adherents?select=count`,
      {
        method: 'GET',
        headers: {
          ...getHeaders(),
          'Prefer': 'count=exact'
        }
      }
    );
    
    if (finalCountResponse.ok) {
      const count = finalCountResponse.headers.get('content-range');
      console.log(`‚úÖ Total final: ${count || 'Non disponible'}`);
    }
    
    console.log('\nüéâ Remplacement termin√© avec succ√®s !');
    console.log('üí° Vos donn√©es sont maintenant optimis√©es pour le plan gratuit Supabase');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du remplacement:', error);
  }
}

// Ex√©cuter le remplacement
replaceWithCleanData();

