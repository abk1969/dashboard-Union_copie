const fetch = require('node-fetch');

console.log('üîç Analyse des donn√©es manquantes - Debug avanc√©...\n');

// Configuration Supabase
const SUPABASE_CONFIG = {
  url: 'https://ybzajzcwxcgoxtqsimol.supabase.co',
  anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InliemFqemN3eGNnb3h0cXNpbW9sIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjI4ODA4NywiZXhwIjoyMDcxODY0MDg3fQ.t6KhbnUmh5Ix3CWlYM5HxjR58GNxtug-h_GMzE9VIio',
};

// Headers pour les requ√™tes
const getHeaders = () => ({
  'apikey': SUPABASE_CONFIG.anonKey,
  'Authorization': `Bearer ${SUPABASE_CONFIG.anonKey}`,
  'Content-Type': 'application/json',
});

async function analyzeMissingData() {
  try {
    console.log('üìä √âtape 1: Analyse des donn√©es 2025 dans Supabase...');
    
    // R√©cup√©rer toutes les donn√©es 2025
    let allData2025 = [];
    let offset = 0;
    const limit = 1000;
    let hasMore = true;
    
    while (hasMore) {
      const response = await fetch(
        `${SUPABASE_CONFIG.url}/rest/v1/adherents?select=*&annee=eq.2025&limit=${limit}&offset=${offset}`,
        {
          method: 'GET',
          headers: getHeaders()
        }
      );
      
      if (response.ok) {
        const data = await response.json();
        allData2025 = allData2025.concat(data);
        
        if (data.length < limit) {
          hasMore = false;
        } else {
          offset += limit;
        }
        
        console.log(`üì• R√©cup√©r√© ${data.length} enregistrements (Total: ${allData2025.length})`);
      } else {
        console.log('‚ùå Erreur lors de la r√©cup√©ration:', response.status);
        hasMore = false;
      }
    }
    
    console.log(`\n‚úÖ Total des donn√©es 2025 r√©cup√©r√©es: ${allData2025.length}`);
    
    // Analyser les CA
    console.log('\nüí∞ √âtape 2: Analyse des CA 2025...');
    
    let totalCA = 0;
    let zeroCA = 0;
    let negativeCA = 0;
    let validCA = 0;
    let maxCA = 0;
    let minCA = Infinity;
    const caValues = [];
    
    allData2025.forEach((item, index) => {
      const ca = parseFloat(item.ca || 0);
      caValues.push(ca);
      totalCA += ca;
      
      if (ca === 0) {
        zeroCA++;
      } else if (ca < 0) {
        negativeCA++;
      } else {
        validCA++;
        if (ca > maxCA) {
          maxCA = ca;
        }
        if (ca < minCA) {
          minCA = ca;
        }
      }
    });
    
    console.log(`üìà CA total 2025: ${totalCA.toLocaleString('fr-FR')}‚Ç¨`);
    console.log(`üìà CA z√©ro: ${zeroCA} enregistrements`);
    console.log(`üìà CA n√©gatifs: ${negativeCA} enregistrements`);
    console.log(`üìà CA valides: ${validCA} enregistrements`);
    console.log(`üìà CA maximum: ${maxCA.toLocaleString('fr-FR')}‚Ç¨`);
    console.log(`üìà CA minimum: ${minCA.toLocaleString('fr-FR')}‚Ç¨`);
    
    // Analyser les fournisseurs
    console.log('\nüè¢ √âtape 3: Analyse par fournisseur...');
    
    const supplierStats = {};
    allData2025.forEach(item => {
      const supplier = item.fournisseur || 'Non d√©fini';
      const ca = parseFloat(item.ca || 0);
      
      if (!supplierStats[supplier]) {
        supplierStats[supplier] = { count: 0, totalCA: 0, zeroCA: 0 };
      }
      
      supplierStats[supplier].count++;
      supplierStats[supplier].totalCA += ca;
      
      if (ca === 0) {
        supplierStats[supplier].zeroCA++;
      }
    });
    
    console.log('üìä Top 10 fournisseurs par CA total:');
    Object.entries(supplierStats)
      .sort((a, b) => b[1].totalCA - a[1].totalCA)
      .slice(0, 10)
      .forEach(([supplier, stats]) => {
        const zeroPercent = ((stats.zeroCA / stats.count) * 100).toFixed(1);
        console.log(`   ${supplier}: ${stats.count} enregistrements, CA: ${stats.totalCA.toLocaleString('fr-FR')}‚Ç¨, Z√©ros: ${zeroPercent}%`);
      });
    
    // Analyser les valeurs CA suspectes
    console.log('\nüîç √âtape 4: Analyse des valeurs CA suspectes...');
    
    const suspiciousValues = caValues.filter(ca => ca > 0 && ca < 1);
    const veryHighValues = caValues.filter(ca => ca > 100000);
    
    console.log(`‚ö†Ô∏è Valeurs CA < 1‚Ç¨: ${suspiciousValues.length} enregistrements`);
    console.log(`‚ö†Ô∏è Valeurs CA > 100,000‚Ç¨: ${veryHighValues.length} enregistrements`);
    
    if (suspiciousValues.length > 0) {
      console.log('üìã Exemples de valeurs < 1‚Ç¨:');
      suspiciousValues.slice(0, 5).forEach(ca => {
        console.log(`   ${ca}‚Ç¨`);
      });
    }
    
    if (veryHighValues.length > 0) {
      console.log('üìã Exemples de valeurs > 100,000‚Ç¨:');
      veryHighValues.slice(0, 5).forEach(ca => {
        console.log(`   ${ca.toLocaleString('fr-FR')}‚Ç¨`);
      });
    }
    
    // Calculer la diff√©rence avec l'attendu
    const expectedCA = 12795899;
    const difference = expectedCA - totalCA;
    const percentage = ((difference / expectedCA) * 100).toFixed(2);
    
    console.log('\nüìä √âtape 5: Comparaison avec l\'attendu...');
    console.log(`üí∞ CA attendu: ${expectedCA.toLocaleString('fr-FR')}‚Ç¨`);
    console.log(`üí∞ CA import√©: ${totalCA.toLocaleString('fr-FR')}‚Ç¨`);
    console.log(`‚ùå Diff√©rence: ${difference.toLocaleString('fr-FR')}‚Ç¨ (${percentage}%)`);
    
    if (difference > 0) {
      console.log('\nüí° Recommandations:');
      console.log('   1. V√©rifiez s\'il y a des lignes filtr√©es dans Excel');
      console.log('   2. V√©rifiez le format des nombres (virgules vs points)');
      console.log('   3. V√©rifiez s\'il y a des lignes vides ou corrompues');
      console.log('   4. V√©rifiez le mapping des colonnes');
    }
    
    console.log('\n‚úÖ Analyse termin√©e !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error);
  }
}

// Ex√©cuter l'analyse
analyzeMissingData();

